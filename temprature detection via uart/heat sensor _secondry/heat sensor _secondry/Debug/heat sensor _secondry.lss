
heat sensor _secondry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000969  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074f  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000559  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000461  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a3  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define F_CPU 8000000UL
//transmitter
int main(void)
{
	USART_Init();
  6c:	0e 94 75 00 	call	0xea	; 0xea <USART_Init>
	GIE_Enable();
  70:	0e 94 71 00 	call	0xe2	; 0xe2 <GIE_Enable>
	ADC_Init();
  74:	0e 94 43 00 	call	0x86	; 0x86 <ADC_Init>
	
	while (1)
	{
		u8 adc_read;
	
		u16 data=ADC_Read (0b11100000);
  78:	80 ee       	ldi	r24, 0xE0	; 224
  7a:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_Read>
		adc_read=((data/256));
		
		USART_SendData(adc_read);
  7e:	89 2f       	mov	r24, r25
  80:	0e 94 91 00 	call	0x122	; 0x122 <USART_SendData>
  84:	f9 cf       	rjmp	.-14     	; 0x78 <main+0xc>

00000086 <ADC_Init>:
  86:	86 b1       	in	r24, 0x06	; 6
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	86 b9       	out	0x06, r24	; 6
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	86 b9       	out	0x06, r24	; 6
  92:	86 b1       	in	r24, 0x06	; 6
  94:	84 60       	ori	r24, 0x04	; 4
  96:	86 b9       	out	0x06, r24	; 6
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	86 b9       	out	0x06, r24	; 6
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	87 b9       	out	0x07, r24	; 7
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	87 b9       	out	0x07, r24	; 7
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	8f 7d       	andi	r24, 0xDF	; 223
  b4:	87 b9       	out	0x07, r24	; 7
  b6:	08 95       	ret

000000b8 <ADC_Read>:
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	97 b9       	out	0x07, r25	; 7
  be:	97 b1       	in	r25, 0x07	; 7
  c0:	89 2b       	or	r24, r25
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	86 b9       	out	0x06, r24	; 6
  ca:	34 9b       	sbis	0x06, 4	; 6
  cc:	fe cf       	rjmp	.-4      	; 0xca <ADC_Read+0x12>
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	86 b9       	out	0x06, r24	; 6
  d4:	24 b1       	in	r18, 0x04	; 4
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	98 2f       	mov	r25, r24
  dc:	88 27       	eor	r24, r24
  de:	82 2b       	or	r24, r18
  e0:	08 95       	ret

000000e2 <GIE_Enable>:
  e2:	8f b7       	in	r24, 0x3f	; 63
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	8f bf       	out	0x3f, r24	; 63
  e8:	08 95       	ret

000000ea <USART_Init>:
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	89 b9       	out	0x09, r24	; 9
  ee:	10 bc       	out	0x20, r1	; 32
  f0:	80 b5       	in	r24, 0x20	; 32
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	80 b5       	in	r24, 0x20	; 32
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 bd       	out	0x20, r24	; 32
  fc:	80 b5       	in	r24, 0x20	; 32
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 bd       	out	0x20, r24	; 32
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	8a b9       	out	0x0a, r24	; 10
 108:	80 b5       	in	r24, 0x20	; 32
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	80 bd       	out	0x20, r24	; 32
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	80 bd       	out	0x20, r24	; 32
 114:	80 b5       	in	r24, 0x20	; 32
 116:	87 7f       	andi	r24, 0xF7	; 247
 118:	80 bd       	out	0x20, r24	; 32
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	8a b9       	out	0x0a, r24	; 10
 120:	08 95       	ret

00000122 <USART_SendData>:
 122:	5d 9b       	sbis	0x0b, 5	; 11
 124:	fe cf       	rjmp	.-4      	; 0x122 <USART_SendData>
 126:	8c b9       	out	0x0c, r24	; 12
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
